#!/usr/bin/env python3

import os
import sys
import json
import subprocess
import tempfile
import shutil
import argparse


def main():
    parser = argparse.ArgumentParser(
        description="Builds and caches sources and wheels"
    )
    parser.add_argument(
        "-p",
        help="Points to the project dirctory",
    )
    parser.add_argument(
        "--cache", default="./localwheels", help="Final cache dir"
    )
    args = parser.parse_args()

    if not os.path.exists(args.p):
        print("Project directory missing {0}.".format(args.p))
        sys.exit(1)

    lockfile_path = os.path.join(args.p, "Pipfile.lock")

    if not os.path.exists(lockfile_path):
        print("Pipfile.lock missing at {0}.".format(lockfile_path))
        sys.exit(3)

    with open(lockfile_path) as fobj:
        data = json.load(fobj)

    defaults = data["default"]
    with tempfile.TemporaryDirectory() as tmpdir:
        newreq_path = os.path.join(tmpdir, "build-requirements.txt")

        # TODO: consider pruning the wheels from the build requirements at
        # this stage. They are from upstream (PSF) PyPI.

        # The --require-hashes option will be used by default if there are
        # hashes in the build-requirements.txt file. We specify it anyway to guard
        # against use of a build-requirements.txt file without hashes.
        cmd = [
            "pip3",
            "download",
            "--no-binary",
            ":all:",
            "--require-hashes",
            "-d",
            tmpdir,
            "-r",
            newreq_path,
        ]
        subprocess.check_call(cmd)

        cmd = [
            "pip3",
            "wheel",
            "--no-binary",
            ":all:",
            "-f",
            tmpdir,
            "-w",
            tmpdir,
            "-r",
            newreq_path,
        ]
        subprocess.check_call(cmd)

        # Now find the names
        names = os.listdir(tmpdir)

        cachenames = os.listdir(args.cache)

        for name in names:
            if name == "build-requirements.txt":  # We don't need this in cache
                continue
            if name in cachenames:  # Means all ready in our cache
                continue

            # Else copy to cache
            filepath = os.path.join(tmpdir, name)
            shutil.copy(filepath, args.cache, follow_symlinks=True)
            print("Copying {0} to cache {1}".format(name, args.cache))


if __name__ == "__main__":
    main()
